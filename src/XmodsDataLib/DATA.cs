/* Xmods Data Library, a library to support tools for The Sims 4,
   Copyright (C) 2014  C. Marinetti

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. 
   The author may be contacted at modthesims.info, username cmarNYC. */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Xmods.DataLib
{
    //public class DATA
    //{
    //    char[] magic;
    //    int version;
    //    uint dataTabOffset;
    //    int numDataTab;
    //    uint structTabOffset;
    //    int numStructTab;

    //    internal class dataTable
    //    {
    //        int nameOffset;
    //        char[] name;        //starts at namePosition, terminated with 0
    //        uint nameHash;      //FNV32 hash of name
    //        int structOffset;
    //        int fieldType;           // 0x0D (13)
    //        int fieldSize;      // 0x60 (96)
    //        int fieldOffset;
    //        int fieldCount;
    //    }

    //    internal class structureTable
    //    {
    //        int nameOffset;
    //        char[] name;        //same as dataTable
    //        uint nameHash;
    //        uint unknown8;      //fieldtype?
    //        int size;
    //        int fieldTableOffset;   //to start of list, skips field count
    //    }
    //    internal class fieldTable
    //    {
    //        int nameOffset;
    //        char[] name;        //same as dataTable
    //        uint nameHash;
    //        uint type; 
    //        int dataOffset;
    //        int unknown10;      //always 0x80000000
    //    }
    //}
    public class DATAtmp
    {
        byte[] stuff1;
        uint nameHash;
        uint descHash;
        TGI iconImage;
        TGI iconHighLight;
        byte[] stuff2;

        public DATAtmp(TGI iconTGI, TGI iconhighlightTGI, uint itemNameHash, uint itemDescriptionHash)
        {
            stuff1 = new byte[] { 0x44, 0x41, 0x54, 0x41, 0x0, 0x1, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xD0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x2, 0x0, 0x0, 0xD5, 0xF2, 0xCD, 0xA5, 0xB8, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x4C, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0xC6, 0x64, 0xCF, 0x16, 0xB9, 0xF8, 0x8A, 0x4A, 0xAA, 0xB2, 0x39, 0x0, 0x0, 0x0, 0x0, 0xEA, 0x46, 0x55, 0xA2, 0x16, 0x32, 0xF3, 0x3B, 0x4A, 0xAA, 0xB2, 0x39, 0x0, 0x0, 0x0, 0x0 };
            nameHash = itemNameHash;
            descHash = itemDescriptionHash;
            iconImage = iconTGI; //ITG icon
            iconHighLight = iconhighlightTGI; //ITG iconhighlight
            stuff2 = new byte[] { 0x33, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6B, 0x1, 0x0, 0x0, 0xA6, 0x64, 0x74, 0x42, 0x5A, 0xFE, 0x3, 0x66, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x11, 0x1, 0x0, 0x0, 0xF3, 0x0, 0x36, 0x12, 0x13, 0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xC7, 0x0, 0x0, 0x0, 0x78, 0xE1, 0xF3, 0x1A, 0x13, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xF8, 0x0, 0x0, 0x0, 0x2F, 0xA3, 0x9C, 0x1B, 0x12, 0x0, 0x0, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xD0, 0x0, 0x0, 0x0, 0x7A, 0x93, 0xAA, 0x6E, 0x13, 0x0, 0x0, 0x0, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xA1, 0x0, 0x0, 0x0, 0x49, 0x8B, 0x5, 0x91, 0x14, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x9E, 0x0, 0x0, 0x0, 0xAC, 0x55, 0x2E, 0xA2, 0x14, 0x0, 0x0, 0x0, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xB2, 0x0, 0x0, 0x0, 0x73, 0x7B, 0x25, 0xB6, 0x6, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xAA, 0x0, 0x0, 0x0, 0xD6, 0xDF, 0xC7, 0xC0, 0x14, 0x0, 0x0, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xA5, 0x0, 0x0, 0x0, 0xA7, 0xD2, 0x3C, 0xDB, 0x6, 0x0, 0x0, 0x0, 0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x14, 0x0, 0x0, 0x0, 0xB1, 0x69, 0x70, 0xE6, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x61, 0x75, 0x64, 0x69, 0x6F, 0x5F, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x6F, 0x6E, 0x5F, 0x61, 0x64, 0x64, 0x0, 0x61, 0x75, 0x64, 0x69, 0x6F, 0x5F, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x6F, 0x6E, 0x5F, 0x72, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x0, 0x62, 0x75, 0x66, 0x66, 0x5F, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x0, 0x62, 0x75, 0x66, 0x66, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x0, 0x69, 0x63, 0x6F, 0x6E, 0x0, 0x69, 0x63, 0x6F, 0x6E, 0x5F, 0x68, 0x69, 0x67, 0x68, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x0, 0x6D, 0x6F, 0x6F, 0x64, 0x5F, 0x74, 0x79, 0x70, 0x65, 0x0, 0x6D, 0x6F, 0x6F, 0x64, 0x5F, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x0, 0x74, 0x69, 0x6D, 0x65, 0x6F, 0x75, 0x74, 0x5F, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x0, 0x75, 0x69, 0x5F, 0x73, 0x6F, 0x72, 0x74, 0x5F, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x0, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x69, 0x6E, 0x67, 0x42, 0x75, 0x66, 0x66, 0x0, 0x42, 0x75, 0x66, 0x66, 0x5F, 0x43, 0x41, 0x53, 0x5F, 0x43, 0x4D, 0x54, 0x6F, 0x6F, 0x6C, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x0 };
        }

        public void Write(BinaryWriter bw)
        {
            bw.Write(this.stuff1);
            bw.Write(descHash);
            bw.Write(nameHash);
            iconImage.Write(bw, TGI.TGIsequence.ITG);
            iconHighLight.Write(bw, TGI.TGIsequence.ITG);
            bw.Write(stuff2);
        }
    }
        
}
